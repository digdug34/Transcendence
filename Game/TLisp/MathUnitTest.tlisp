;	MathUnitTest.tlisp
;
;	Regression tests for math operations
;	Copyright (c) 2015 by Kronosaur Productions, LLC. All Rights Reserved

(setq TEST_SUITE (list

	;	Literals

	{	code: '(link "0")			result: 0		}
	{	code: '(link "2")			result: 2		}
	{	code: '(link "0.")			result: 0.0		}
	{	code: '(link "0.1")			result: 0.1		}
	{	code: '(link "-0.1")		result: -0.1	}
	{	code: '(link "+0.1")		result: 0.1		}
	{	code: '(link "0123")		result: 123		}
	{	code: '(link "234")			result: 234		}
	{	code: '(link "0x21")		result: 33		}
	{	code: '(link "1.4e")		result: "1.4e"	}
	{	code: '(link "1.4f")		result: "1.4f"	}
	{	code: '(link "1.a")			result: "1.a"	}
	{	code: '(link "1e3")			result: 1000.0	}
	{	code: '(link "1e-3")		result: 0.001	}
	{	code: '(link "1E-3")		result: 0.001	}
	{	code: '(link "1.2E-3")		result: 0.0012	}
	{	code: '(link "0123_test")	result: "0123_test"	}
	{	code: '(link "1.4.5")		result: "1.4.5"	}

	;	Equality

	{	code: '(= 3 2)			result: Nil		}
	{	code: '(= 2 2)			result: True	}
	{	code: '(= 2.2 2)		result: Nil		}
	{	code: '(= 2.2 2.2)		result: True	}
	{	code: '(= 2.0 2)		result: True	}
	{	code: '(= 2.1 2)		result: Nil		}
	{	code: '(= "2" 2)		result: True	}

	{	code: '(eq "2" 2)		result: Nil		}

	{	code: '(!= 2.1 2)		result: True	}
	{	code: '(!= 2.0 2)		result: Nil		}

	;	Original Integer Math

	{	code: '(add 2)			result: 2	}
	{	code: '(add 2 2)		result: 4	}
	{	code: '(add 2 2 3 -5)	result: 2	}
	{	code: '(subtract 2 2)	result: 0	}
	{	code: '(multiply 5)		result: 5	}
	{	code: '(multiply 2 2)	result: 4	}
	{	code: '(multiply 5 5 4)	result: 100	}
	{	code: '(divide 4 2)		result: 2	}
	{	code: '(divide 5 2)		result: 2	}

	{	code: '(add 2.6 2.5)	result: 4	}
	{	code: '(subtract 2.4 2.5)	result: 0	}
	{	code: '(multiply 2.5 2.5)	result: 4	}
	{	code: '(divide 6 2.5)		result: 3	}

	{	code: '(add (list 2 2 3))	result: 7	}
	{	code: '(multiply (list 2 2 3))	result: 12	}

	;	New Math

	{	code: '(+ 2)			result: 2	}
	{	code: '(+ 2 2)			result: 4	}
	{	code: '(+ 2.5 2)		result: 4.5	}
	{	code: '(+ 2.5 2.5)		result: 5.0	}
	{	code: '(- 2.5 2.5)		result: 0	}
	{	code: '(- 2.5 2.0)		result: 0.5	}
	{	code: '(- 100)			result: -100 }
	{	code: '(- 0.5)			result: -0.5 }
	{	code: '(- -0.5)			result: 0.5 }
	{	code: '(* 25)			result: 25	}
	{	code: '(* 25 5 0.2)		result: 25.0	}
	{	code: '(/ 25 5)			result: 5.0	}
	{	code: '(/ 5 2)			result: 2.5	}

	{	code: '(+ (list 2 2.0))			result: 4.0	}
	{	code: '(* (list 2 2 5))			result: 20	}

	;	Functions

	{	code: '(abs 5)			result: 5 }
	{	code: '(abs -5)			result: 5 }
	{	code: '(abs 5.5)		result: 5.5 }
	{	code: '(abs -5.5)		result: 5.5 }

	{	code: '(find (list 1 2 2.5 3) 2.5)		result: 2 }
	{	code: '(find (list 1 2 2.5 3) 2.4)		result: Nil }
	{	code: '(find (list 1 2 2.5 3) 1.0)		result: 0 }

	{	code: '(min 1 2 4)			result: 1 }
	{	code: '(min 1 20.5 -4.5)	result: -4.5 }
	{	code: '(max 1 2 4)			result: 4 }
	{	code: '(max 1 20.5 4)		result: 20.5 }

	{	code: '(mod 4 4)		result: 0 }
	{	code: '(mod 6 5)		result: 1 }
	{	code: '(mod 6.0 5.0)	result: 1.0 }

	{	code: '(pow 2 2)		result: 4 }

	{	code: '(sqrt 4)			result: 2 }
	{	code: '(sqrtn 4)		result: 2 }
	{	code: '(sqrtn 0.25)		result: 0.5 }

	;	Types

	{	code: '(typeof 1.5)		result: 'real }
	
	;	Vectors: testing vector equality and construction
	
	{	code: '(v= (vector (list 1 2)) (vector (list 1 2)))		result: True}
	{	code: '(v= (vector (list 1 2)) (vector (list 1 2 3)))		result: Nil}
	{	code: '(v= (vector (list 1 2.0)) (vector (list 1 2)))		result: True}
	{	code: '(v= (vector (list (list 1 1) (list 1 1))) (vfilled 1.0 (list 2 2)))		result: True}
	{	code: '(v= (vector (list (list 1 2) (list 3 4))) (vfilled -1.0 (list 2 2)))	result: Nil}
	
	;	Vectors: testing vector indexing
	
	{	code: '(= 3 (v-> (vector (list (list 1 3 2) (list 1 2 3))) (list 0 1)))		result: True}
	{	code: '(v= (vector (list (list 1 2) (list 1 3))) (v-> (vector (list (list 1 3 2) (list 1 2 3))) (list nil (list 0 2))))		result: True}
	{	code: '(v= (vector (list 1 2)) (v<- (vfilled 0 (list 2)) (list Nil) (list 1 2)))	result: True}
	{	code: '(v= (vector (list (list 0 0 0 0) (list 0 0 0 0) (list 0 0 1 2) (list 0 0 3 4))) (v<- (vfilled 0 (list 4 4)) (list (list 2 3) (list 2 3)) (list 1 2 3 4)))	result: True}
	
	;	Vectors: testing vector math operations
	
	{	code: '(v= (vector (list (list 0 0 0 0) (list 0 0 0 0) (list 0 0 0 0))) (v+ (vfilled (- 0 1) (list 3 4)) (vfilled 1 (list 3 4))))		result: True}
	{	code: '(v= (vector (list (list 0 4) (list 0 9))) (v+ (vector (list (list 1 2) (list 3 4.5))) (vector (list (list (- 0 1) 2) (list (- 0 3) 4.5))) ))		result: True}
	{	code: '(= 11.25 (vdot (vector (list 2 3.5 (- 0 1.5))) (vector (list 1 2 (- 0 1.5)))))		result: True}
	{	code: '(v= (vector (list 0.25 9)) (v^ (vector (list 0.5 3)) (vector (list 0.5 3))))		result: True}
	{	code: '(v= (vector (list (list (- 0 1) (- 0 2)) (list (- 0 3) (- 0 4)))) (v* (- 0 1) (vector (list (list 1 2) (list 3 4)))))	result: True}
	
	;	Bug Regression Tests

	{	code: '(/ 5 (* 1 10))			result: 0.5	}
	))

(debugUnitTest "Math Unit Test" TEST_SUITE)
