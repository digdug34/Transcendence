;	ComparisonUnitTest.tlisp
;
;	Regression tests for comparison operations
;	Copyright (c) 2015 by Kronosaur Productions, LLC. All Rights Reserved

(setq TEST_SUITE (list

	;	For backgwards compatibility, we don't coerce strings to numbers

	{	code: '(eq)				result: True }
	{	code: '(eq 1)			result: True }
	{	code: '(eq 1 1)			result: True }
	{	code: '(eq 1 2)			result: Nil }
	{	code: '(eq 1 1 1 1)		result: True }
	{	code: '(eq 0 1 1 1)		result: Nil }
	{	code: '(eq 1 1 1 0)			result: Nil }
	{	code: '(eq 1.0 1)			result: True }
	{	code: '(eq 2.0 2)			result: True }
	{	code: '(eq "a" "a")			result: True }
	{	code: '(eq "A" "a")			result: True }
	{	code: '(eq "a" "A")			result: True }
	{	code: '(eq "b" "A")			result: Nil }
	{	code: '(eq "a" "A" "a")			result: True }
	{	code: '(eq "1" 1)			result: Nil }
	{	code: '(eq "0.1" 0.1)			result: Nil }
	{	code: '(eq "0.100" 0.1)			result: Nil }
	{	code: '(eq "1e-1" 0.1)			result: Nil }
	{	code: '(eq 1 "1")			result: Nil }
	{	code: '(eq "asdf" 0)			result: Nil }
	{	code: '(eq "asdf" "asdf")			result: True }
	{	code: '(eq "ASDF" "asdf")			result: True }

	;	For backwards compatibility, for all comparisons, anything less
	;	than two arguments always returns True.

	{	code: '(ls)			result: True }
	{	code: '(ls 1)			result: True }
	{	code: '(ls 0)			result: True }
	{	code: '(ls -1)			result: True }
	{	code: '(ls 1 1)			result: Nil }
	{	code: '(ls 1 2)			result: True }
	{	code: '(ls -1 2)			result: True }
	{	code: '(ls 1 2 3 4 5.0 6 7)			result: True }
	{	code: '(ls 1 1 2 3 4 5 6 7)			result: Nil }
	{	code: '(ls 1 2 3.0 4 5 6 7 0)		result: Nil }
	{	code: '(ls 8 1 2 3 4 5 6 7)			result: Nil }
	{	code: '(ls "")			result: True }
	{	code: '(ls "a")			result: True }
	{	code: '(ls "a" "a")			result: Nil }
	{	code: '(ls "a" "b")			result: True }
	{	code: '(ls "a" "B")			result: True }
	{	code: '(ls "a" "B" "c")			result: True }

	{	code: '(gr)			result: True }
	{	code: '(gr 1)			result: True }
	{	code: '(gr 0)			result: True }
	{	code: '(gr -1)			result: True }
	{	code: '(gr 1 1)			result: Nil }
	{	code: '(gr 2 1)			result: True }
	{	code: '(gr 2 -1)			result: True }
	{	code: '(gr 7 6 5 4 3 2.5 1)			result: True }
	{	code: '(gr 7 6 5 5 4 3 2 1)			result: Nil }
	{	code: '(gr 0 7.5 6 5 4 3 2 1)		result: Nil }
	{	code: '(gr 7 6 5 4 3 2 1 8)			result: Nil }
	{	code: '(gr "")			result: True }
	{	code: '(gr "a")			result: True }
	{	code: '(gr "a" "a")			result: Nil }
	{	code: '(gr "b" "a")			result: True }
	{	code: '(gr "B" "a")			result: True }
	{	code: '(gr "c" "B" "a")			result: True }

	{	code: '(leq)			result: True }
	{	code: '(leq 1)			result: True }
	{	code: '(leq 0)			result: True }
	{	code: '(leq -1)			result: True }
	{	code: '(leq 1 1)			result: True }
	{	code: '(leq 1 2)			result: True }
	{	code: '(leq -1 2)			result: True }
	{	code: '(leq 1 1 2 3 4 4 5 6 7 7)			result: True }
	{	code: '(leq 1 2 3 4 5 6 7 0)			result: Nil }
	{	code: '(leq 8 1 2 3 4 5 6 7)			result: Nil }
	{	code: '(leq "")			result: True }
	{	code: '(leq "a")			result: True }
	{	code: '(leq "a" "a")			result: True }
	{	code: '(leq "a" "b")			result: True }
	{	code: '(leq "a" "B")			result: True }
	{	code: '(leq "a" "B" "c")			result: True }
	{	code: '(leq "a" "d" "c")			result: Nil }

	{	code: '(geq)			result: True }
	{	code: '(geq 1)			result: True }
	{	code: '(geq 0)			result: True }
	{	code: '(geq -1)			result: True }
	{	code: '(geq 1 1)			result: True }
	{	code: '(geq 2 1)			result: True }
	{	code: '(geq 2 -1)			result: True }
	{	code: '(geq 7 7 6 5 4 4 3 2 1 1)			result: True }
	{	code: '(geq 0 7 6 5 4 3 2 1)			result: Nil }
	{	code: '(geq 7 6 5 4 3 2 1 8)			result: Nil }
	{	code: '(geq "")			result: True }
	{	code: '(geq "a")			result: True }
	{	code: '(geq "a" "a")			result: True }
	{	code: '(geq "b" "a")			result: True }
	{	code: '(geq "B" "a")			result: True }
	{	code: '(geq "c" "B" "a")			result: True }
	{	code: '(geq "a" "d" "c")			result: Nil }

	{	code: '(eq nil nil)			result: True }
	{	code: '(eq nil "")			result: Nil }
	{	code: '(eq nil (list))			result: True }
	{	code: '(eq '(1 2 3) '(1 2 3))			result: True }
	{	code: '(eq '(1 3 3) '(1 2 3))			result: Nil }
	{	code: '(eq nil '(1 2 3))			result: Nil }
	{	code: '(neq nil '(1 2 3))			result: True }

	;	When comparing less than two arguments, we always compare to
	;	Nil. Nil is equal to an empty list and it is equal to a blank string
	;	but it is less than everything else.

	{	code: '(=)				result: True }
	{	code: '(= 1)			result: Nil }
	{	code: '(= 1 1)			result: True }
	{	code: '(= 1 2)			result: Nil }
	{	code: '(= 1 1 1 1)		result: True }
	{	code: '(= 0 1 1 1)		result: Nil }
	{	code: '(= 1 1 1 0)			result: Nil }
	{	code: '(= 1.0 1)			result: True }
	{	code: '(= 2.0 2)			result: True }
	{	code: '(= "a" "a")			result: True }
	{	code: '(= "A" "a")			result: True }
	{	code: '(= "a" "A")			result: True }
	{	code: '(= "b" "A")			result: Nil }
	{	code: '(= "a" "A" "a")			result: True }
	{	code: '(= "1" 1)			result: True }
	{	code: '(= "0.1" 0.1)			result: True }
	{	code: '(= "0.100" 0.1)			result: True }
	{	code: '(= "1e-1" 0.1)			result: True }
	{	code: '(= 1 "1")			result: True }
	{	code: '(= "asdf" 0)			result: Nil }
	{	code: '(= "asdf" "asdf")			result: True }
	{	code: '(= "ASDF" "asdf")			result: True }

	{	code: '(<)			result: Nil }
	{	code: '(< 1)			result: True }
	{	code: '(< 0)			result: True }
	{	code: '(< -1)			result: True }
	{	code: '(< 1 1)			result: Nil }
	{	code: '(< 1 2)			result: True }
	{	code: '(< -1 2)			result: True }
	{	code: '(< 1 2 3 4 5.0 6 7)			result: True }
	{	code: '(< 1 1 2 3 4 5 6 7)			result: Nil }
	{	code: '(< 1 2 3.0 4 5 6 7 0)		result: Nil }
	{	code: '(< 8 1 2 3 4 5 6 7)			result: Nil }
	{	code: '(< "")			result: Nil }
	{	code: '(< "a")			result: True }
	{	code: '(< "a" "a")			result: Nil }
	{	code: '(< "a" "b")			result: True }
	{	code: '(< "a" "B")			result: True }
	{	code: '(< "a" "B" "c")			result: True }

	{	code: '(>)			result: Nil }
	{	code: '(> 1)			result: Nil }
	{	code: '(> 0)			result: Nil }
	{	code: '(> -1)			result: Nil }
	{	code: '(> 1 1)			result: Nil }
	{	code: '(> 2 1)			result: True }
	{	code: '(> 2 -1)			result: True }
	{	code: '(> 7 6 5 4 3 2.5 1)			result: True }
	{	code: '(> 7 6 5 5 4 3 2 1)			result: Nil }
	{	code: '(> 0 7.5 6 5 4 3 2 1)		result: Nil }
	{	code: '(> 7 6 5 4 3 2 1 8)			result: Nil }
	{	code: '(> "")			result: Nil }
	{	code: '(> "a")			result: Nil }
	{	code: '(> "a" "a")			result: Nil }
	{	code: '(> "b" "a")			result: True }
	{	code: '(> "B" "a")			result: True }
	{	code: '(> "c" "B" "a")			result: True }

	{	code: '(<=)			result: True }
	{	code: '(<= 1)			result: True }
	{	code: '(<= 0)			result: True }
	{	code: '(<= -1)			result: True }
	{	code: '(<= 1 1)			result: True }
	{	code: '(<= 1 2)			result: True }
	{	code: '(<= -1 2)			result: True }
	{	code: '(<= 1 1 2 3 4 4 5 6 7 7)			result: True }
	{	code: '(<= 1 2 3 4 5 6 7 0)			result: Nil }
	{	code: '(<= 8 1 2 3 4 5 6 7)			result: Nil }
	{	code: '(<= "")			result: True }
	{	code: '(<= "a")			result: True }
	{	code: '(<= "a" "a")			result: True }
	{	code: '(<= "a" "b")			result: True }
	{	code: '(<= "a" "B")			result: True }
	{	code: '(<= "a" "B" "c")			result: True }
	{	code: '(<= "a" "d" "c")			result: Nil }

	{	code: '(>=)			result: True }
	{	code: '(>= 1)			result: Nil }
	{	code: '(>= 0)			result: Nil }
	{	code: '(>= -1)			result: Nil }
	{	code: '(>= 1 1)			result: True }
	{	code: '(>= 2 1)			result: True }
	{	code: '(>= 2 -1)			result: True }
	{	code: '(>= 7 7 6 5 4 4 3 2 1 1)			result: True }
	{	code: '(>= 0 7 6 5 4 3 2 1)			result: Nil }
	{	code: '(>= 7 6 5 4 3 2 1 8)			result: Nil }
	{	code: '(>= "")			result: True }
	{	code: '(>= "a")			result: Nil }
	{	code: '(>= "a" "a")			result: True }
	{	code: '(>= "b" "a")			result: True }
	{	code: '(>= "B" "a")			result: True }
	{	code: '(>= "c" "B" "a")			result: True }
	{	code: '(<= "a" "d" "c")			result: Nil }

	{	code: '(= nil nil)			result: True }
	{	code: '(= nil "")			result: True }
	{	code: '(= nil (list))			result: True }
	{	code: '(= '(1 2 3) '(1 2 3))			result: True }
	{	code: '(= '(1 3 3) '(1 2 3))			result: Nil }
	{	code: '(= nil '(1 2 3))			result: Nil }
	{	code: '(!= nil '(1 2 3))			result: True }

	;	Conversion code

	{	code: '(convertTo 'int32 5)			result: 5 }
	{	code: '(convertTo 'int32 -5)		result: -5 }
	{	code: '(convertTo 'int32 5.5)		result: 5 }
	{	code: '(convertTo 'int32 5.1)		result: 5 }
	{	code: '(convertTo 'int32 5.9)		result: 5 }
	{	code: '(convertTo 'int32 -5.9)		result: -5 }
	{	code: '(convertTo 'int32 "5")		result: 5 }
	{	code: '(convertTo 'int32 "5.5")		result: 5 }
	{	code: '(convertTo 'int32 "0x10")	result: 16 }
	{	code: '(convertTo 'real 5)			result: 5.0 }
	{	code: '(convertTo 'real 5.0)		result: 5.0 }
	{	code: '(convertTo 'real 5.1)		result: 5.1 }
	{	code: '(convertTo 'real "5")		result: 5.0 }
	{	code: '(convertTo 'real "5.5")		result: 5.5 }
	{	code: '(convertTo 'real "0x10")		result: 16.0 }
	{	code: '(convertTo 'string 5)		result: "5" }
	{	code: '(convertTo 'string 5.5)		result: "5.5" }
	{	code: '(convertTo 'list 5)			result: '(5) }
	))

(debugUnitTest "Comparison Unit Test" TEST_SUITE)
