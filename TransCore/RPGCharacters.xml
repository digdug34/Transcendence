<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- CHARACTER SCREEN ==========================================================

	USAGE

	The object (generally a ship) with this screen must set the character 
	parameter on the class.

	The object must also define the following language elements:

		FirstMeetingIntro
		MeetingIntro
		NoMissions

	The character type must define the following static data elements:

		MissionAttribute: A string representing the attribute to use for all 
				missions that may be assigned by the character.

	The character type must define the following events:

		OnCharacterCanBeMet: If handled, the event may return True to indicate
				that the meeting should continue. Or the event may return a
				string to display declining the meeting.

-->

	<DockScreen UNID="&dsRPGCharacterDefault;"
			inherit=			"&dsDockScreenBase;"
			>
		<OnScreenInit>
			;	Make sure the player is allowed to talk to this character.

			(block (explanation)
				(switch
					;	If Nil, then the event is not handled so we continue meeting.

					(not (setq explanation (typFireObjEvent (objGetProperty gSource 'character) gSource 'OnCharacterCanBeMet)))
						True

					;	If True, then we are allowed to meet and continue.

					(eq explanation True)
						True

					;	Otherwise, we expect an explanation string.

					(scrShowScreen gScreen &dsRPGMessage; {
						desc: explanation
						nextScreen: 'forceUndock
						})
					)
				)
		</OnScreenInit>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(firstMeeting (not (typGetData (objGetProperty gSource 'character) 'firstPlayerMeetingTime)))
						)

						(rpgPagePaneInit gScreen 
							(scrTranslate gScreen (if firstMeeting 'FirstMeetingIntro 'MeetingIntro)) {
							
							onExitPane: (lambda (theScreen pageDesc options)
								(block (charType screenData)
									(setq charType (objGetProperty gSource 'character))

									;	We've met character

									(rpgCharacterSetMeeting charType)
							
									;	Next screen

									(setq screenData (typGetData charType 'screenData))
									(if screenData
							
										;	If a screen has been set, show it.
								
										(switch
								
											;	If we have a translateType and translateID, then translate
											;	[We need to do this sometimes if the data that we're passing has 
											;	non-serializable objects.]
									
											(@ screenData 'translateID)
												(scrShowScreen 
													gScreen 
													(@ screenData 'screen) 
													(typTranslate (@ screenData 'translateType) (@ screenData 'translateID))
													)
									
											;	Otherwise, we expect a screen.
									
											(scrShowScreen 
												gScreen 
												(@ screenData 'screen) 
												(@ screenData 'pane) 
												(@ screenData 'data)
												)
											)

										;	If no set screen, look for missions.

										(rpgCharacterShowMissionScreen gSource { 
											nextScreen: 'forceUndock
											})
										)
									)
								)
							})
						)
				</OnPaneInit>
			</Default>
		</Panes>
	</DockScreen>

<!-- GLOBAL FUNCTIONS ==========================================================

	USAGE

	These functions use the following global variables on character types:

	firstPlayerMeetingTime: Tick of player's first meeting with character.
			Nil if the player has never met face to face.

	lastestPlayerMeetingTime: Tick of most recent meeting with character.

	lastNodeID: Character's last known position. Nil means unknown.

	lastSystemPos: Character's last known position in the lastNodeID system.

	objID: The objID of character's current ship. If Nil, then no ship has
			been created yet.

	playerRel: If Nil, character has never met the player. Positive numbers mean that
			character likes/trusts/respects the player. Negative numbers mean the
			opposite.

	screenData: This is a structure specifying the screen to show when the player
			interacts with the character. The struct has the following fields:

			screen: The screen to show
			pane: If non-Nil, the pane to navigate to
			data: If non-Nil, data to pass to the screen

			If this value is Nil, then we look for missions tagged with 
			character mission attribute (e.g., kateMorgentalMission).

-->

	<Globals>
		(block Nil
			(setq rpgCharacterAscend (lambda (charType)
				(block (
					(lastNodeID (typGetData charType 'lastNodeID))
					
					shipClassValue
					objID
					shipObj
					)
					
					(switch
						;	If lastNodeID doesn't equal this system, then nothing to do.
						
						(and lastNodeID (!= lastNodeID (sysGetNode)))
							Nil	;(dbgOutput (sysGetNode) ": lastNodeID = " lastNodeID)
							
						;	If no last ship class then we can't do anything because we don't know
						;	how to find the object ID.
						
						(not (setq shipClassValue (typGetData charType 'lastShipClass)))
							Nil
							
						;	Get the object ID from the character type and ship class
						
						(not (setq objID 
								(typGetData charType 
									(cat 'objID_ (int shipClassValue))
									)
								))
							Nil	;(dbgOutput (sysGetNode) ": Can't find object ID for " charType)
							
						;	If no ship or the ship is already ascended, then nothing to do
						
						(not (setq shipObj (objGetObjByID objID)))
							Nil	;(dbgOutput (sysGetNode) ": Can't find ship object")
							
						(objGetProperty shipObj 'ascended)
							Nil	;(dbgOutput (sysGetNode) ": Ship already ascended")
							
						;	Otherwise, ascend the object
						
						(block Nil
							(typSetData charType 'lastSystemPos (objGetPos shipObj))
							(typSetData charType 'lastKnown (objGetProperty shipObj 'known))
							(sysAscendObject shipObj)
							; (dbgOutput (sysGetNode) ": Ship ascended: " (objGetID shipObj))
							)
						)
					)
				))
				
			(setq rpgCharacterAssignRandom (lambda (sourceObj criteria role)
				
				;	This function assigns a random character to the given source object.
				;	It should be called once when the object is created.
				;
				;	Use rpgCharacterTranslate to get text for the character.

				(block (
					(type (objGetType sourceObj))
					(characterList (typGetData type 'rpgCharacter.list))
					(next (typGetData type 'rpgCharacter.next))

					(characterRole (or role "npc"))
					(characterVar (cat "rpgCharacter." characterRole))

					characterID
					)

					;	If we don't yet have a character list, then generate one.

					(if (not characterList)
						(block ()
							(setq characterList (rpgCharacterGenerateList criteria))
							(setq next 0)
							(typSetData type 'rpgCharacter.list characterList)
							(typSetData type 'rpgCharacter.next 0)
							)
						)

					;	Pick a random character (the list has been shuffled, so we 
					;	just pick the next character on the list).

					(setq characterID (@ characterList (mod next (count characterList))))

					;	Store this character with the object.

					(objSetData sourceObj characterVar characterID)

					;	Next character

					(typIncData type 'rpgCharacter.next)

					;	Done

					characterID
					)
				))

			(setq rpgCharacterChangeRel (lambda (charType event)
			
				; This function changes the character's relationship with the
				; player based on something the player did.
				;
				; The following events are valid:
				;
				; 'betrayal: The player betrayed the character in a fundamental
				;		way, generally by agreeing to pursuing a goal and then
				;		actively opposing that goal.
				;
				; 'opposition: The player acted against a major character goal,
				;		but did not necessarily betray the character.
				;
				; 'failure: The player failed in a task that the character was
				;		counting on, generally through incompetence rather than
				;		enmity.
				;
				; 'aid: The player helped the character in pursuit of a major
				;		goal.
				;
				; 'rescue: The player risked his/her life to save the character
				;		(or to save the life of someone the character cares
				;		about).
				
				(block (
					(curRel (if (typGetData charType 'playerRel) (typGetData charType 'playerRel) 'notSet))
					)
					
					(switch
						
						(eq event 'betrayal)
							(typSetData charType 'playerRel
								(@ {
									notSet: 'nemesis			;	First impression count for a lot.
									nemesis: 'nemesis
									dislikes: 'nemesis
									neutral: 'dislikes
									likes: 'neutral
									loyalty: 'nemesis			;	Betrayal hurts most if you feel loyal to someone.
									}
									curRel
									))
								
						(eq event 'opposition)
							(typSetData charType 'playerRel
								(@ {
									notSet: 'dislikes
									nemesis: 'nemesis
									dislikes: 'dislikes
									neutral: 'dislikes
									likes: 'neutral
									loyalty: (random (list		;	60% of the time we stay loyal
										'nemesis
										'dislikes
										'neutral
										'likes
										'loyalty
										'loyalty
										'loyalty
										'loyalty
										'loyalty
										'loyalty
										))
									}
									curRel
									))
						
						(eq event 'failure)
							(typSetData charType 'playerRel
								(@ {
									notSet: 'dislikes
									nemesis: 'nemesis
									dislikes: 'dislikes
									neutral: 'dislikes
									likes: 'neutral
									loyalty: 'loyalty
									}
									curRel
									))
								
						(eq event 'aid)
							(typSetData charType 'playerRel
								(@ {
									notSet: 'likes
									nemesis: 'nemesis
									dislikes: (if (leq (random 1 100) 50) 'neutral 'dislikes)
									neutral: 'likes
									likes: (if (leq (random 1 100) 20) 'loyalty 'likes)
									loyalty: 'loyalty
									}
									curRel
									))
								
						(eq event 'rescue)
							(typSetData charType 'playerRel
								(@ {
									notSet: 'loyalty
									nemesis: 'loyalty
									dislikes: 'likes
									neutral: 'likes
									likes: 'loyalty
									loyalty: 'loyalty
									}
									curRel
									))
						)
					)
				))

			(setq rpgCharacterCreateShip (lambda (charType shipClassUNID pos options)
				(block (
					;	We store a ship ID for every unique ship class. Some characters
					;	use multiple ships.
					
					(shipClassValue (if shipClassUNID shipClassUNID (typGetData charType 'lastShipClass)))
					(shipIDVar (cat 'objID_ (int shipClassValue)))
					(objID (typGetData charType shipIDVar))
					
					shipObj
					)

					(switch
						;	If ship for character does not exist, then we need to 
						;	create him.

						(not objID)
 							(block Nil
								(setq shipObj (sysCreateShip shipClassValue pos (typGetStaticData charType 'Sovereign)))
								(objSetProperty shipObj 'known (@ options 'setKnown))
								(typSetData charType 'lastNodeID (sysGetNode))
								(typSetData charType 'lastShipClass shipClassValue)
								(typSetData charType shipIDVar (objGetId shipObj))
								(typSetData charType 'screenData Nil)
								
								; (dbgOutput (sysGetNode) ": No obj ID; creating ship: " (objGetID shipObj))
								)
								
						;	If we can't find the object, then this is an error, but we
						;	create the ship anyway
						
						(not (setq shipObj (objGetObjByID objID)))
							(block Nil
								(printTo 'log "ERROR: Unable to find object ID: " objID ".")
								
								(setq shipObj (sysCreateShip shipClassValue pos (typGetStaticData charType 'Sovereign)))
								(objSetProperty shipObj 'known (@ options 'setKnown))
								(typSetData charType 'lastNodeID (sysGetNode))
								(typSetData charType 'lastShipClass shipClassValue)
								(typSetData charType shipIDVar (objGetId shipObj))
								(typSetData charType 'screenData Nil)
								
								; (dbgOutput (sysGetNode) ": Obj ID not found; creating ship: " (objGetID shipObj))
								)

						;	If the object is ascended, we descend it.

						(objGetProperty shipObj 'ascended)
							(block (isKnown)

								;	If ship has been here all along, then just place him in the
								;	original position.

								(if (eq (sysGetNode) (typGetData charType 'lastNodeID))
									(block Nil
										(setq pos (typGetData charType 'lastSystemPos))
										(setq isKnown (typGetData charType 'lastKnown))
										)
									
									;	If he was not here last, then we honor options

									(setq isKnown (@ options 'setKnown))
									)

								;	Descend him back to the system

								(setq shipObj (sysDescendObject objID pos))
								; (dbgOutput (sysGetNode) ": Descending ship: " (objGetID shipObj))
								
								;	If we could not descend, then something happened. Just create
								;	the character here.

								(if (not shipObj)
									(block Nil
										(setq shipObj (sysCreateShip shipClassValue pos (typGetStaticData charType 'Sovereign)))
										(typSetData charType shipIDVar (objGetID shipObj))
										)
									)
									
								;	Remember where we are
									
								(typSetData charType 'lastNodeID (sysGetNode))
								(typSetData charType 'lastShipClass shipClassValue)
								
								;	Set known
								
								(objSetProperty shipObj 'known isKnown)
									
								;	Done
								
								(typSetData charType 'screenData Nil)
								)
							
						;	Otherwise, we assume shipObj is valid

						)

					;	We always reenable docking, in case some previous code disabled it.

					(if shipObj
						(objSetProperty shipObj 'dockingEnabled True)
						)
						
					;	If requested, we repair all damage
					
					(if (@ options 'repairAll)
						(block Nil
							(intArmorRepairAll shipObj 25 'alwaysRepair)
							(objSetProperty shipObj 'interiorHP (objGetProperty shipObj 'maxInteriorHP))
							)
						)

					;	Return character's ship

					shipObj
					)
				))

			(setq rpgCharacterGenerateList (lambda (criteria)
				
				;	This function returns a list of character identifiers for use
				;	by minor characters, such as station masters. The result consists
				;	of a list of character identifiers. Each identifier is a list
				;	with two values: an UNID and an ID within that type.
				;
				;	The order in the list is randomized.

				(shuffle
					(apply append
						(map (typFind criteria) 'excludeNil theType
							(block (
								(characterTable (typGetStaticData theType 'CharacterTable))
								)
								(if characterTable
									(map characterTable theCharacter
										(list theType (@ theCharacter 0))
										)

									;	If no character table, then the whole type is one
									;	character.

									(list (list theType Nil))
									)
								)
							)
						)
					)
				))

			(setq rpgCharacterGetQuickRel (lambda (charType)

				; This function returns the given character's relationship with 
				; the player. The function returns one of the following values:
				;
				; Nil: The player and the character have never met.
				;
				; 'favorable: The character is favorable towards the player.
				;		(i.e., rel is neutral, likes, or loyalty)
				;
				; 'unfavorable: The character is unfavorable towards the player.
				;		(i.e., rel is dislikes or nemesis)

				(block (rel)
					(setq rel (rpgCharacterGetRel charType))

					(switch
						(not (typGetData charType 'firstPlayerMeetingTime))
							Nil

						(or (eq rel 'nemesis)
								(eq rel 'dislikes))
							'unfavorable

						'favorable
						)
					)
				))

			(setq rpgCharacterGetRel (lambda (charType)
				
				; This function returns the given character's relationship with 
				; the player. The function returns one of the following values:
				;
				; Nil: The player and the character have never met (or the
				;		character has not yet formed an opinion).
				;
				; 'nemesis: The character hates the player.
				;
				; 'dislikes: The character dislikes the player, but not enough
				;		to actively work against her.
				;
				; 'neutral: The character does not have an opinion about the
				;		player.
				;
				; 'likes: The character generally likes the player, but is not
				;		necessarily a close friend.
				;
				; 'loyalty: The character feels loyalty and friendship for the
				;		player.
				
				(typGetData charType 'playerRel)
				))

			(setq rpgCharacterGetStatus (lambda (charType)
				(typGetData charType 'status)
				))

			(setq rpgCharacterIsAliveAndWell (lambda (charType)
				(block (
					(status (typGetData charType 'status))
					)
					(switch
						;	Dead means dead
						
						(= status 'dead)
							Nil
							
						;	Otherwise, we're alive and well
						
						True
						)
					)
				))

			(setq rpgCharacterSetMeeting (lambda (charType)
				(block Nil
					(typSetData charType 'latestPlayerMeetingTime (unvGetTick))
					(if (not (typGetData charType 'firstPlayerMeetingTime))
						(typSetData charType 'firstPlayerMeetingTime (unvGetTick))
						)
					)
				))

			(setq rpgCharacterSetScreen (lambda (charType screenData)
				(typSetData charType 'screenData screenData)
				))
				
			(setq rpgCharacterSetStatus (lambda (charType status)
			
				;	This function sets the status of the character. We support the following
				;	values:
				;
				;	Nil: Character is alive and well. No special status.
				;
				;	'dead: Character is dead.
				
				(typSetData charType 'status status)
				))

			(setq rpgCharacterShowMissionScreen (lambda (missionSource options)
				
				; This function is used to offer players a new mission.
				;
				; CONTEXT
				;
				; This must be called from inside a dock screen with a valid
				; gScreen parameter.
				;
				; PARAMETERS
				;
				; missionSource: The object that is giving the mission, generally
				;		character's ship.
				;
				; options:
				;		nextScreen: Screen to show when we're done.

				(block (nextMissionTime theMission rank newMissions)

					(setq charType (objGetProperty missionSource 'character))
					(setq missionAttrib (cat " +" (typGetStaticData charType 'MissionAttribute) ";"))

					(switch

						;	If we have an active mission from this ship then we show it.

						(setq theMission (@ (msnFind missionSource (cat "aS" missionAttrib)) 0))
							(scrShowScreen gScreen &dsRPGMission;
								{
								missionObj: theMission
								nextScreen: (@ options 'nextScreen)
								})

						;	If we have an open mission available, return that

						(setq theMission (@ (msnFind missionSource (cat "oS" missionAttrib)) 0))
							(scrShowScreen gScreen &dsRPGMission;
								{
								missionObj: theMission
								nextScreen: (@ options 'nextScreen)
								})

						;	Make a list of available missions. 
						;	If we can't find anything, then we've got nothing.

						(not (setq newMissions (typFind (cat "n" missionAttrib))))
							(scrShowScreen gScreen &dsRPGMessage; {
								desc: (objTranslate missionSource 'NoMissions)
								nextScreen: 'forceUndock
								})

						; Create a random mission from the list. If we succeed, then show the mission
						; screen.

						(setq theMission (msnCreate newMissions missionSource))
							(scrShowScreen gScreen &dsRPGMission;
								{
								missionObj: theMission
								nextScreen: (@ options 'nextScreen)
								})

						; Otherwise, nothing

						(scrShowScreen gScreen &dsRPGMessage; {
							desc: (objTranslate missionSource 'NoMissions)
							nextScreen: 'forceUndock
							})
						)
					)
				))

			(setq rpgCharacterTranslate (lambda (sourceObj role textID data)
				(block (
					(characterRole (or role "npc"))
					(characterVar (cat "rpgCharacter." characterRole))
					(characterID (objGetData sourceObj characterVar))

					(type (@ characterID 0))
					(id (@ characterID 1))
					)
					(if id
						(typTranslate type (cat id "." textID) data)
						(typTranslate type textID data)
						)
					)
				))
			)
	</Globals>

</TranscendenceModule>
